name: Pipeline

on:
  push:
    branches:
      - '{{ cookiecutter.main_git_branch }}'
      - 'develop'
      - 'qa'
      - 'staging'

env:
  {% if cookiecutter.permissions_provider == "AWS IAM" -%}
  PIPELINE_USER_ACCESS_KEY_ID: ${{ "{{" }} secrets.{{cookiecutter.pipeline_user_aws_access_key_id_variable_name}} {{ "}}" }}
  PIPELINE_USER_SECRET_ACCESS_KEY: ${{ "{{" }} secrets.{{cookiecutter.pipeline_user_aws_secret_access_key_variable_name}} {{ "}}" }}
  {% endif -%}
  SAM_TEMPLATE: {{cookiecutter.sam_template}}

  DEVELOP_STACK_NAME: {{cookiecutter.develop_stack_name}}
  DEVELOP_PIPELINE_EXECUTION_ROLE: {{cookiecutter.develop_pipeline_execution_role}}
  DEVELOP_CLOUDFORMATION_EXECUTION_ROLE: {{cookiecutter.develop_cloudformation_execution_role}}
  DEVELOP_ARTIFACTS_BUCKET: {{cookiecutter.develop_artifacts_bucket}}
  {%- if cookiecutter.develop_image_repository %}
  DEVELOP_IMAGE_REPOSITORY: {{cookiecutter.develop_image_repository}}
  {% else %}
  # If there are functions with "Image" PackageType in your template,
  # uncomment the line below and add "--image-repository ${DEVELOP_IMAGE_REPOSITORY}" to
  # testing "sam package" and "sam deploy" commands.
  # DEVELOP_IMAGE_REPOSITORY = '0123456789.dkr.ecr.region.amazonaws.com/repository-name'
  {% endif -%}
  DEVELOP_REGION: {{cookiecutter.testing_region}}

  TESTING_STACK_NAME: {{cookiecutter.testing_stack_name}}
  TESTING_PIPELINE_EXECUTION_ROLE: {{cookiecutter.testing_pipeline_execution_role}}
  TESTING_CLOUDFORMATION_EXECUTION_ROLE: {{cookiecutter.testing_cloudformation_execution_role}}
  TESTING_ARTIFACTS_BUCKET: {{cookiecutter.testing_artifacts_bucket}}
  {%- if cookiecutter.testing_image_repository %}
  TESTING_IMAGE_REPOSITORY: {{cookiecutter.testing_image_repository}}
  {% else %}
  # If there are functions with "Image" PackageType in your template,
  # uncomment the line below and add "--image-repository ${TESTING_IMAGE_REPOSITORY}" to
  # testing "sam package" and "sam deploy" commands.
  # TESTING_IMAGE_REPOSITORY = '0123456789.dkr.ecr.region.amazonaws.com/repository-name'
  {% endif -%}
  TESTING_REGION: {{cookiecutter.testing_region}}

  STAGING_STACK_NAME: {{cookiecutter.staging_stack_name}}
  STAGING_PIPELINE_EXECUTION_ROLE: {{cookiecutter.staging_pipeline_execution_role}}
  STAGING_CLOUDFORMATION_EXECUTION_ROLE: {{cookiecutter.staging_cloudformation_execution_role}}
  STAGING_ARTIFACTS_BUCKET: {{cookiecutter.staging_artifacts_bucket}}
  {%- if cookiecutter.staging_image_repository %}
  STAGING_IMAGE_REPOSITORY: {{cookiecutter.staging_image_repository}}
  {% else %}
  # If there are functions with "Image" PackageType in your template,
  # uncomment the line below and add "--image-repository ${STAGING_IMAGE_REPOSITORY}" to
  # testing "sam package" and "sam deploy" commands.
  # STAGING_IMAGE_REPOSITORY = '0123456789.dkr.ecr.region.amazonaws.com/repository-name'
  {% endif -%}
  STAGING_REGION: {{cookiecutter.staging_region}}

  PROD_STACK_NAME: {{cookiecutter.prod_stack_name}}
  PROD_PIPELINE_EXECUTION_ROLE: {{cookiecutter.prod_pipeline_execution_role}}
  PROD_CLOUDFORMATION_EXECUTION_ROLE: {{cookiecutter.prod_cloudformation_execution_role}}
  PROD_ARTIFACTS_BUCKET: {{cookiecutter.prod_artifacts_bucket}}
  {%- if cookiecutter.prod_image_repository %}
  PROD_IMAGE_REPOSITORY: {{cookiecutter.prod_image_repository}}
  {% else %}
  # If there are functions with "Image" PackageType in your template,
  # uncomment the line below and add "--image-repository ${PROD_IMAGE_REPOSITORY}" to
  # prod "sam package" and "sam deploy" commands.
  # PROD_IMAGE_REPOSITORY = '0123456789.dkr.ecr.region.amazonaws.com/repository-name'
  {% endif -%}
  PROD_REGION: {{cookiecutter.prod_region}}

{% if cookiecutter.permissions_provider == "OpenID Connect (OIDC)" -%}
permissions:
  id-token: write
  contents: read
{% endif -%}


jobs:
  test:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: |
          # trigger the tests here

  build-and-package-dev:
    if: github.ref == 'refs/heads/develop'
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
  
      - name: Build resources
        run: sam build --template ${SAM_TEMPLATE} --use-container

      - name: Assume the develop pipeline user role
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          {% if cookiecutter.permissions_provider == "AWS IAM" -%}
          aws-access-key-id: {{ '${{ env.PIPELINE_USER_ACCESS_KEY_ID }}' }}
          aws-secret-access-key: {{ '${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}' }}
          {% endif -%}
          aws-region: {{ '${{ env.DEVELOP_REGION }}' }}
          role-to-assume: {{ '${{ env.DEVELOP_PIPELINE_EXECUTION_ROLE }}' }}
          role-session-name: develop-packaging
          role-duration-seconds: 3600
          role-skip-session-tagging: true
        
      - name: Upload artifacts to develop artifact buckets
        run: |
          sam package \
            --s3-bucket ${DEVELOP_ARTIFACTS_BUCKET} \
            {%- if cookiecutter.develop_image_repository %}
            --image-repository ${DEVELOP_IMAGE_REPOSITORY} \
            {%- endif %}
            --region ${DEVELOP_REGION} \
            --output-template-file packaged-develop.yaml
        
      - uses: actions/upload-artifact@v3
        with:
          name: packaged-develop.yaml
          path: packaged-develop.yaml

  build-and-package-testing:
    if: github.ref == 'refs/heads/qa'
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true

      - name: Build resources
        run: sam build --template ${SAM_TEMPLATE} --use-container

      - name: Assume the testing pipeline user role
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          {% if cookiecutter.permissions_provider == "AWS IAM" -%}
          aws-access-key-id: {{ '${{ env.PIPELINE_USER_ACCESS_KEY_ID }}' }}
          aws-secret-access-key: {{ '${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}' }}
          {% endif -%}
          aws-region: {{ '${{ env.TESTING_REGION }}' }}
          role-to-assume: {{ '${{ env.TESTING_PIPELINE_EXECUTION_ROLE }}' }}
          role-session-name: testing-packaging
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Upload artifacts to testing artifact buckets
        run: |
          sam package \
            --s3-bucket ${TESTING_ARTIFACTS_BUCKET} \
            {%- if cookiecutter.testing_image_repository %}
            --image-repository ${TESTING_IMAGE_REPOSITORY} \
            {%- endif %}
            --region ${TESTING_REGION} \
            --output-template-file packaged-testing.yaml

      - uses: actions/upload-artifact@v3
        with:
          name: packaged-testing.yaml
          path: packaged-testing.yaml


  build-and-package-staging:
    if: github.ref == 'refs/heads/staging'
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
  
      - name: Build resources
        run: sam build --template ${SAM_TEMPLATE} --use-container

      - name: Assume the staging pipeline user role
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          {% if cookiecutter.permissions_provider == "AWS IAM" -%}
          aws-access-key-id: {{ '${{ env.PIPELINE_USER_ACCESS_KEY_ID }}' }}
          aws-secret-access-key: {{ '${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}' }}
          {% endif -%}
          aws-region: {{ '${{ env.STAGING_REGION }}' }}
          role-to-assume: {{ '${{ env.STAGING_PIPELINE_EXECUTION_ROLE }}' }}
          role-session-name: staging-packaging
          role-duration-seconds: 3600
          role-skip-session-tagging: true
        
      - name: Upload artifacts to staging artifact buckets
        run: |
          sam package \
            --s3-bucket ${STAGING_ARTIFACTS_BUCKET} \
            {%- if cookiecutter.staging_image_repository %}
            --image-repository ${STAGING_IMAGE_REPOSITORY} \
            {%- endif %}
            --region ${STAGING_REGION} \
            --output-template-file packaged-staging.yaml
        
      - uses: actions/upload-artifact@v3
        with:
          name: packaged-staging.yaml
          path: packaged-staging.yaml

  build-and-package-production:
    if: github.ref == 'refs/heads/{{ cookiecutter.main_git_branch }}'
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
          
      - name: Build resources
        run: sam build --template ${SAM_TEMPLATE} --use-container

      - name: Assume the prod pipeline user role
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          {% if cookiecutter.permissions_provider == "AWS IAM" -%}
          aws-access-key-id: {{ '${{ env.PIPELINE_USER_ACCESS_KEY_ID }}' }}
          aws-secret-access-key: {{ '${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}' }}
          {% endif -%}
          aws-region: {{ '${{ env.PROD_REGION }}' }}
          role-to-assume: {{ '${{ env.PROD_PIPELINE_EXECUTION_ROLE }}' }}
          role-session-name: prod-packaging
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Upload artifacts to production artifact buckets
        run: |
          sam package \
            --s3-bucket ${PROD_ARTIFACTS_BUCKET} \
            {%- if cookiecutter.prod_image_repository %}
            --image-repository ${PROD_IMAGE_REPOSITORY} \
            {%- endif %}
            --region ${PROD_REGION} \
            --output-template-file packaged-prod.yaml

      - uses: actions/upload-artifact@v3
        with:
          name: packaged-prod.yaml
          path: packaged-prod.yaml

  deploy-develop:
    if: github.ref == 'refs/heads/{{ cookiecutter.main_git_branch }}'
    needs: [build-and-package-dev]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
      - uses: actions/download-artifact@v3
        with:
          name: packaged-develop.yaml
        
      - name: Assume the develop pipeline user role
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          {% if cookiecutter.permissions_provider == "AWS IAM" -%}
          aws-access-key-id: {{ '${{ env.PIPELINE_USER_ACCESS_KEY_ID }}' }}
          aws-secret-access-key: {{ '${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}' }}
          {% endif -%}
          aws-region: {{ '${{ env.DEVELOP_REGION }}' }}
          role-to-assume: {{ '${{ env.DEVELOP_PIPELINE_EXECUTION_ROLE }}' }}
          role-session-name: develop-deployment
          role-duration-seconds: 3600
          role-skip-session-tagging: true
        
      - name: Deploy to develop account
        run: |
          sam deploy --stack-name ${DEVELOP_STACK_NAME} \
            --template packaged-develop.yaml \
            --capabilities CAPABILITY_IAM \
            --region ${DEVELOP_REGION} \
            --s3-bucket ${DEVELOP_ARTIFACTS_BUCKET} \
            {%- if cookiecutter.develop_image_repository %}
            --image-repository ${DEVELOP_IMAGE_REPOSITORY} \
            {%- endif %}
            --no-fail-on-empty-changeset \
            --role-arn ${DEVELOP_CLOUDFORMATION_EXECUTION_ROLE}

  deploy-testing:
    if: github.ref == 'refs/heads/qa'
    needs: [build-and-package-testing]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
      - uses: actions/download-artifact@v3
        with:
          name: packaged-testing.yaml
        
      - name: Assume the testing pipeline user role
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          {% if cookiecutter.permissions_provider == "AWS IAM" -%}
          aws-access-key-id: {{ '${{ env.PIPELINE_USER_ACCESS_KEY_ID }}' }}
          aws-secret-access-key: {{ '${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}' }}
          {% endif -%}
          aws-region: {{ '${{ env.TESTING_REGION }}' }}
          role-to-assume: {{ '${{ env.TESTING_PIPELINE_EXECUTION_ROLE }}' }}
          role-session-name: testing-deployment
          role-duration-seconds: 3600
          role-skip-session-tagging: true
        
      - name: Deploy to testing account
        run: |
          sam deploy --stack-name ${TESTING_STACK_NAME} \
            --template packaged-testing.yaml \
            --capabilities CAPABILITY_IAM \
            --region ${TESTING_REGION} \
            --s3-bucket ${TESTING_ARTIFACTS_BUCKET} \
            {%- if cookiecutter.testing_image_repository %}
            --image-repository ${TESTING_IMAGE_REPOSITORY} \
            {%- endif %}
            --no-fail-on-empty-changeset \
            --role-arn ${TESTING_CLOUDFORMATION_EXECUTION_ROLE}
  
  deploy-staging:
    if: github.ref == 'refs/heads/staging'
    needs: [build-and-package-staging]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
      - uses: actions/download-artifact@v3
        with:
          name: packaged-staging.yaml
                  
      - name: Assume the staging pipeline user role
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          {% if cookiecutter.permissions_provider == "AWS IAM" -%}
          aws-access-key-id: {{ '${{ env.PIPELINE_USER_ACCESS_KEY_ID }}' }}
          aws-secret-access-key: {{ '${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}' }}
          {% endif -%}
          aws-region: {{ '${{ env.STAGING_REGION }}' }}
          role-to-assume: {{ '${{ env.STAGING_PIPELINE_EXECUTION_ROLE }}' }}
          role-session-name: staging-deployment
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Deploy to staging account
          run: |
          sam deploy --stack-name ${STAGING_STACK_NAME} \
            --template packaged-staging.yaml \
            --capabilities CAPABILITY_IAM \
            --region ${STAGING_REGION} \
            --s3-bucket ${STAGING_ARTIFACTS_BUCKET} \
            {%- if cookiecutter.staging_image_repository %}
            --image-repository ${STAGING_IMAGE_REPOSITORY} \
            {%- endif %}
            --no-fail-on-empty-changeset \
            --role-arn ${STAGING_CLOUDFORMATION_EXECUTION_ROLE}
    
  integration-test:
    if: github.ref == 'refs/heads/{{ cookiecutter.main_git_branch }}'
    needs: [build-and-package-production]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: |
          # trigger the integration tests here

  deploy-prod:
    if: github.ref == 'refs/heads/{{ cookiecutter.main_git_branch }}'
    needs: [integration-test]
    runs-on: ubuntu-latest
    # Configure GitHub Action Environment to have a manual approval step before deployment to production
    # https://docs.github.com/en/actions/reference/environments
    # environment: <configured-environment>
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
      - uses: actions/download-artifact@v3
        with:
          name: packaged-prod.yaml

      - name: Assume the prod pipeline user role
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          {% if cookiecutter.permissions_provider == "AWS IAM" -%}
          aws-access-key-id: {{ '${{ env.PIPELINE_USER_ACCESS_KEY_ID }}' }}
          aws-secret-access-key: {{ '${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}' }}
          {% endif -%}
          aws-region: {{ '${{ env.PROD_REGION }}' }}
          role-to-assume: {{ '${{ env.PROD_PIPELINE_EXECUTION_ROLE }}' }}
          role-session-name: prod-deployment
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Deploy to production account
        run: |
          sam deploy --stack-name ${PROD_STACK_NAME} \
            --template packaged-prod.yaml \
            --capabilities CAPABILITY_IAM \
            --region ${PROD_REGION} \
            --s3-bucket ${PROD_ARTIFACTS_BUCKET} \
            {%- if cookiecutter.prod_image_repository %}
            --image-repository ${PROD_IMAGE_REPOSITORY} \
            {%- endif %}
            --no-fail-on-empty-changeset \
            --role-arn ${PROD_CLOUDFORMATION_EXECUTION_ROLE}
